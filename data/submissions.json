{
  "123": [
    {
      "exerciseId": 1,
      "code": "console.assert(validarEmail(\"test@example.com\") === true, \"Email válido deve retornar true\");\nconsole.assert(validarEmail(\"test@example.com\") === true, \"Email válido deve retornar true\");\nconsole.assert(validarEmail(\"test@example.com\") === true, \"Email válido deve retornar true\");",
      "testResults": {
        "output": "\n=== TESTES ===\nPASSOU: Email válido deve retornar true\nPASSOU: Email válido deve retornar true\nPASSOU: Email válido deve retornar true\n\n=== RESUMO ===\nTestes executados: 3\nPassou: 3\nFalhou: 0",
        "allPassed": true,
        "passed": 3,
        "failed": 0
      },
      "timestamp": "2025-10-07T18:01:15.381Z",
      "completed": true
    }
  ],
  "11111": [
    {
      "exerciseId": 1,
      "code": "console.assert(validarEmail(\"test@example.com\") === true, \"Email válido deve retornar true\");\nconsole.assert(validarEmail(\"testexample.com\") === false, \"Email inválido deve retornar true\");\nconsole.assert(validarEmail(\"test@example.com\") === true, \"Email válido deve retornar true\");",
      "testResults": {
        "output": "\n=== TESTES ===\nPASSOU: Email válido deve retornar true\nPASSOU: Email inválido deve retornar true\nPASSOU: Email válido deve retornar true\n\n=== RESUMO ===\nTestes executados: 3\nPassou: 3\nFalhou: 0",
        "allPassed": true,
        "passed": 3,
        "failed": 0
      },
      "timestamp": "2025-10-08T10:38:19.935Z",
      "completed": true
    },
    {
      "exerciseId": 2,
      "code": "console.assert(calculadora('+', 5,3) === 8, \"5 + 3 deve dar 8\");\nconsole.assert(calculadora('*', 5,3) === 15, \"5 * 3 deve dar 15\");\nconsole.assert(calculadora('/', 5,3) === 5/3, \"5 / 3 deve dar \"+ 5/3);",
      "testResults": {
        "output": "\n=== TESTES ===\nPASSOU: 5 + 3 deve dar 8\nPASSOU: 5 * 3 deve dar 15\nPASSOU: 5 / 3 deve dar 1.6666666666666667\n\n=== RESUMO ===\nTestes executados: 3\nPassou: 3\nFalhou: 0",
        "allPassed": true,
        "passed": 3,
        "failed": 0
      },
      "timestamp": "2025-10-08T10:38:24.136Z",
      "completed": true
    },
    {
      "exerciseId": 3,
      "code": "console.assert(1 === 1, \"fatorial(4) deve ser 24\");\nconsole.assert(1 === 1, \"fatorial(4) deve ser 24\");\nconsole.assert(1 === 1, \"fatorial(4) deve ser 24\");",
      "testResults": {
        "output": "\n=== TESTES ===\nPASSOU: fatorial(4) deve ser 24\nPASSOU: fatorial(4) deve ser 24\nPASSOU: fatorial(4) deve ser 24\n\n=== RESUMO ===\nTestes executados: 3\nPassou: 3\nFalhou: 0",
        "allPassed": true,
        "passed": 3,
        "failed": 0
      },
      "timestamp": "2025-10-08T10:40:27.526Z",
      "completed": true
    },
    {
      "exerciseId": 4,
      "code": "// Complete a função:\n\nfunction fatorial(n){\n  if(n < -1){\n    return \"Não é possivel obter o fatorial de um número negativo\";\n  }\n  res = 1;\n\n  for(n;n >= 1; n--){\n    res *= n;\n  }\n  return res;\n}",
      "testResults": {
        "output": "\n=== TESTES ===\nPASSOU: fatorial(0) deve ser 1\nPASSOU: fatorial(1) deve ser 1\nPASSOU: fatorial(5) deve ser 120\nPASSOU: fatorial(-3) deve ser 'Não é possivel obter o fatorial de um número negativo'\nPASSOU: fatorial(4) deve ser 24\n\n=== RESUMO ===\nTestes executados: 5\nPassou: 5\nFalhou: 0",
        "allPassed": true,
        "passed": 5,
        "failed": 0
      },
      "timestamp": "2025-10-08T10:46:31.614Z",
      "completed": true
    }
  ],
  "25392": [
    {
      "exerciseId": 1,
      "code": "console.assert(validarEmail(\"test@example.com\") === true, \"Email válido deve retornar true\");\n\nconsole.assert(validarEmail(\"testexample.com\") === false, \"Email válido deve retornar false\");\n\nconsole.assert(validarEmail(\"test@examplecom\") === false, \"Email válido deve retornar false\");",
      "testResults": {
        "output": "\n=== TESTES ===\nPASSOU: Email válido deve retornar true\nPASSOU: Email válido deve retornar false\nPASSOU: Email válido deve retornar false\n\n=== RESUMO ===\nTestes executados: 3\nPassou: 3\nFalhou: 0",
        "allPassed": true,
        "passed": 3,
        "failed": 0
      },
      "timestamp": "2025-10-08T10:54:54.310Z",
      "completed": true
    },
    {
      "exerciseId": 1,
      "code": "// Escreve os teus testes aqui usando console.assert:\n// Exemplo: console.assert(validarEmail(\"test@example.com\") === true, \"Email válido deve retornar true\");",
      "testResults": {
        "output": "",
        "allPassed": false,
        "passed": 0,
        "failed": 0
      },
      "timestamp": "2025-10-06T17:17:00.907Z",
      "completed": false
    },
    {
      "exerciseId": 1,
      "code": "console.assert(validarEmail(\"test@example.com\") === true, \"Email válido deve retornar true\");",
      "testResults": {
        "output": "Erro na execução:\nteste is not defined",
        "allPassed": false,
        "passed": 0,
        "failed": 0
      },
      "timestamp": "2025-10-06T17:17:13.171Z",
      "completed": false
    },
    {
      "exerciseId": 1,
      "code": "// Escreve os teus testes aqui usando console.assert:\n// Exemplo: console.assert(validarEmail(\"test@example.com\") === true, \"Email válido deve retornar true\");",
      "testResults": {
        "output": "Nenhum teste encontrado. Use console.assert() para criar testes.\n\n=== RESUMO ===\nTestes executados: 0\nPassou: 0\nFalhou: 0",
        "allPassed": false,
        "passed": 0,
        "failed": 0
      },
      "timestamp": "2025-10-06T17:17:17.514Z",
      "completed": false
    },
    {
      "exerciseId": 2,
      "code": "console.assert(calculadora('+', 5, 3) === 8, \"5 + 3 deve ser 8\");\n\nconsole.assert(calculadora('+', 5, 3) === 8, \"5 + 3 deve ser 8\");\nconsole.assert(calculadora('+', 5, 4) === 9, \"5 + 3 deve ser 9\");",
      "testResults": {
        "output": "\n=== TESTES ===\nPASSOU: 5 + 3 deve ser 8\nPASSOU: 5 + 3 deve ser 8\nPASSOU: 5 + 3 deve ser 9\n\n=== RESUMO ===\nTestes executados: 3\nPassou: 3\nFalhou: 0",
        "allPassed": true,
        "passed": 3,
        "failed": 0
      },
      "timestamp": "2025-10-08T10:55:23.566Z",
      "completed": true
    },
    {
      "exerciseId": 3,
      "code": "console.assert(JSON.stringify(ordenarArray([3,1,2])) === JSON.stringify([1,2,3]), \"Array deve ser ordenado\");\nconsole.assert(JSON.stringify(ordenarArray([3,1,2])) === JSON.stringify([1,2,3]), \"Array deve ser ordenado\");\nconsole.assert(JSON.stringify(ordenarArray([3,1,2])) === JSON.stringify([1,2,3]), \"Array deve ser ordenado\");",
      "testResults": {
        "output": "\n=== TESTES ===\nPASSOU: Array deve ser ordenado\nPASSOU: Array deve ser ordenado\nPASSOU: Array deve ser ordenado\n\n=== RESUMO ===\nTestes executados: 3\nPassou: 3\nFalhou: 0",
        "allPassed": true,
        "passed": 3,
        "failed": 0
      },
      "timestamp": "2025-10-08T10:55:17.950Z",
      "completed": true
    },
    {
      "exerciseId": 4,
      "code": "function fatorial(n){\n  res = 1;\n\n  for(n;n >= 1; n--){\n    res *= n;\n  }\n  return res;\n}",
      "testResults": {
        "output": "=== OUTPUTS ===\nTodos os testes passaram! Parabéns!\n\n=== TESTES ===\nPASSOU: fatorial(0) deve ser 1\nPASSOU: fatorial(1) deve ser 1\nPASSOU: fatorial(5) deve ser 120\nPASSOU: fatorial(3) deve ser 6\nPASSOU: fatorial(4) deve ser 24\n\n=== RESUMO ===\nTestes executados: 5\nPassou: 5\nFalhou: 0",
        "allPassed": true,
        "passed": 5,
        "failed": 0
      },
      "timestamp": "2025-10-08T10:31:49.871Z",
      "completed": true
    }
  ]
}